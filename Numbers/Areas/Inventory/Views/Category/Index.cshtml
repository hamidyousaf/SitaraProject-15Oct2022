@model InvItemCategories
@{
    ViewData["Title"] = "List of Categories";
    ViewData["CurrentPage"] = "Categories";
}



<div class="modal inmodal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true"></div>
@*<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>List of Categories</h2>
        <ol class="breadcrumb">
            <li class="active">
                <a href="#">List</a>
            </li>
            <li>
                <a asp-controller="Category" asp-action="Create"> <strong>Create</strong></a>
            </li>
        </ol>
    </div>
</div>*@
<div class="form-group">
    <div class="col-lg-12">
        <input type="text" name="name" value="" class="form-control" placeholder="Search Category" autocomplete="on" id="treeViewSearch" />
    </div>
</div>

<div class="col-lg-12">
    <div id="treeView">
    </div>
</div>

@section customJS{
    <script src="~/lib/jsTree/jstree.min.js"></script>
    <script>
        $("#treeView").jstree({
            "core": {
                "data": {
                    "url": function (node) {   
                        return "/Inventory/Api/GetItemCategory";
                    },
                    "data": function (node) {
                        return { "id": node.id };
                    }
                },
                "check_callback": true,
                "themes": { "stripes": true },
                "animation": 0
            },
            "plugins": [
                "contextmenu", "search", "state",
                "wholerow", "sort"
            ],
            "contextmenu": {
                "items": function ($node) {
                    var tree = $("#treeView").jstree(true);
                    return {
                        "Create Sibling": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Create Sibling",
                            "action": function (obj) {
                                //tree.edit($node);
                                CreateNode($node);
                            }
                        },
                        "Create Child": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Create Child",
                            "action": function (obj) {
                                CreateChildNode($node);
                                //tree.edit($node);
                            }
                        },
                        "Edit": {
                            "separator_before": true,
                            "separator_after": false,
                            "label": "Edit",
                            "action": function (obj) {
                                EditNode($node);
                            }
                        }
                        //,
                        //"Delete": {
                        //    "separator_before": true,
                        //    "separator_after": false,
                        //    "label": "Delete",
                        //    "action": function (obj) {
                        //        DeleteNode($node);
                        //    }
                        //}
                    };
                }
            }
        });

        var to = false;
        $("#treeViewSearch").keyup(function () {
            if (to) { clearTimeout(to); }
            to = setTimeout(function () {
                var v = $("#treeViewSearch").val();

                $('#treeView').jstree(true).search(v);
                window.find(v);
            }, 250);
        });
        function CreateNode(node) {
            debugger
            if (node.parent == "#")
                node.parent = null;
            else
                node.parent = node.parent;
            $.ajax({
                url: "/Inventory/Category/CreateSibling?id=" + node.parent
            })
                .done(function (data) {
                    $("#modal").html(data);
                    $("#modal").modal("show");
                })
                .fail(function (data) {
                    swal("Error", data.statusText, "warning");
                });
        }
        function CreateChildNode(node) {
            if (!node.parent == "#") {
                swal("Error", "You can't create child category", "warning");
                return;
            }
            $.ajax({
                url: "/Inventory/Category/CreateChild?id=" + node.id
            })
                .done(function (data) {
                    $("#modal").html(data);
                    $("#modal").modal("show");
                })
                .fail(function (data) {
                    swal("Error", data.statusText, "warning");
                });
        }
        function EditNode(node) {
            $.ajax({
                url: "/Inventory/Category/Edit?id=" + node.id
            })
                .done(function (data) {
                    $("#modal").html(data);
                    $("#modal").modal("show");
                })
                .fail(function (data) {
                    swal("Error", data.statusText, "warning");
                });
        }
        function DeleteNode(node) {
            var tree = $('#treeView').jstree(true);
            //tree.delete_node(node);
            if (node.children_d.length != 0) {
                swal("Can't delete category", "Please delete all child category first", "warning");
                return;
            }
            swal({
                title: "Are you sure, you want to delete?",
                text: node.text,
                icon: "warning",
                buttons: [true, "Yes, delete it!"],
                dangerMode: true
            }).then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        url: "/Inventory/Category/Delete?id=" + node.id
                    })
                        .done(function (data) {
                            if (data.success) {
                                tree.delete_node(node);
                                toasterMessage(false, data.message, node.text);
                            }
                            else {
                                toasterMessage(true, data.message, node.text);
                            }
                        })
                        .fail(function (data) {
                            swal(
                                {
                                    icon: "error",
                                    text: data.responseText,
                                    dangerMode: true
                                }
                            );
                        });
                }
            });
        }
    </script>
}
@section customCSS{
    <link href="~/css/plugins/jsTree/style.min.css" rel="stylesheet">
}
